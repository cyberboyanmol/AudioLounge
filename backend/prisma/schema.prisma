// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId          String            @id @unique @default(uuid())
  email           String            @unique
  name            String?
  avatar          String?
  googleId        String?           @map("google_id")
  activated       Boolean           @default(false)
  provider        Provider          @default(LOCAL)
  updatedAt       DateTime          @updatedAt @map(name: "updated_at")
  createdAt       DateTime          @default(now()) @map(name: "created_at")
  roomcreatedByme Room[]
  SpeakerInEvent  SpeakerInEvent[]
  refreshTokens   Refresh[]
  UserInRoom      UserInRoom[]
  recordingSchema recordingSchema[]
  AttendeeInEvent AttendeeInEvent[]
  Event           Event[]
}

model Room {
  roomId      String       @id @unique @default(uuid())
  roomname    String
  roomBanner  String
  roomLogo    String
  description String?
  roomType    RoomType     @default(PUBLIC)
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  creatorId   String?
  creator     User?        @relation(fields: [creatorId], references: [userId])
  UserInRoom  UserInRoom[]
  Events      Event[]
}

model Event {
  eventId         String            @id @unique @default(uuid())
  discussiontopic String
  eventbanner     String
  description     String?
  EventRoom       Room?             @relation(fields: [EventroomId], references: [roomId])
  creator         User?             @relation(fields: [creatorId], references: [userId])
  creatorId       String            @unique
  EventroomId     String            @unique
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  start_timing    DateTime
  endTiming       DateTime?
  tags            String[]
  eventType       EventType         @default(PUBLIC)
  eventcategory   eventCategory
  attendeesCount  Int               @default(0)
  SpeakerInEvent  SpeakerInEvent[]
  recordingSchema recordingSchema[]
  AttendeeInEvent AttendeeInEvent[]
}

model SpeakerInEvent {
  speaker     User   @relation(fields: [speakerId], references: [userId])
  speakerId   String
  eventroom   Event  @relation(fields: [eventroomId], references: [eventId])
  eventroomId String

  @@id([speakerId, eventroomId])
}

model UserInRoom {
  user   User                @relation(fields: [userId], references: [userId])
  userId String
  room   Room                @relation(fields: [roomId], references: [roomId])
  roomId String
  roles  UserRoleInEventRoom

  @@id([userId, roomId])
}

model AttendeeInEvent {
  socketId String
  user     User                @relation(fields: [userId], references: [userId])
  userId   String              @unique()
  isHost   Boolean
  event    Event               @relation(fields: [eventId], references: [eventId])
  eventId  String
  roles    AttendeeRoleInEvent

  @@id([userId, eventId])
}

model Refresh {
  refreshId    String @id @unique @default(uuid())
  user         User   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId       String
  refreshtoken String @unique

  @@index([userId])
}

model recordingSchema {
  user          User     @relation(fields: [userId], references: [userId])
  userId        String
  room          Event    @relation(fields: [roomId], references: [eventId])
  roomId        String
  recordingId   String   @id @unique @default(uuid())
  url           String
  recordingTime DateTime
}

enum RoomType {
  SOCIAL
  PUBLIC
  PRIVATE
}

enum EventType {
  PUBLIC
  PRIVATE
}

enum eventCategory {
  AUDIO
  VIDEOANDAUDIO
}

enum Provider {
  LOCAL
  GOOGLE
}

enum UserRoleInEventRoom {
  ADMIN
  MODERATOR
  MEMBERS
}

enum AttendeeRoleInEvent {
  LISTENER
  SPEAKERANDLISTENER
}

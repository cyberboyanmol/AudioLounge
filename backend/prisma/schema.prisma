// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId          String            @id @unique @default(uuid())
  email           String            @unique
  name            String?
  avatar          String?
  googleId        String?           @unique() @map("google_id")
  activated       Boolean           @default(false)
  provider        Provider          @default(LOCAL)
  updatedAt       DateTime          @updatedAt @map(name: "updated_at")
  createdAt       DateTime          @default(now()) @map(name: "created_at")
  roomcreatedByme Room[]
  speakerInEvent  SpeakerInEvent[]
  refreshTokens   Refresh[]
  userInRoom      UserInRoom[]
  recordingSchema recordingSchema[]
  attendeeInEvent AttendeeInEvent[]
  Event           Event[]
}

model Room {
  roomId      String       @id @unique @default(uuid())
  roomname    String
  roomBanner  String
  roomLogo    String
  description String?
  roomType    RoomType     @default(PUBLIC)
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  creatorId   String?
  creator     User?        @relation(fields: [creatorId], references: [userId])
  userInRoom  UserInRoom[]
  events      Event[]
  tags        String[]
}

model Event {
  eventId         String            @id @unique @default(uuid())
  topic           String
  eventbanner     String
  description     String?
  eventroomId     String
  eventRoom       Room              @relation(fields: [eventroomId], references: [roomId])
  creator         User              @relation(fields: [creatorId], references: [userId])
  creatorId       String            @unique
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  start_timing    DateTime
  end_timing      DateTime?
  isEnded         Boolean           @default(false)
  isStarted       Boolean           @default(false)
  tags            String[]
  eventType       EventType         @default(PUBLIC)
  eventcategory   eventCategory
  attendeesCount  Int               @default(0)
  speakerInEvent  SpeakerInEvent[]
  recordingSchema recordingSchema[]
  attendeeInEvent AttendeeInEvent[]
}

model SpeakerInEvent {
  speaker     User   @relation(fields: [speakerId], references: [userId])
  speakerId   String
  eventroom   Event  @relation(fields: [eventroomId], references: [eventId])
  eventroomId String

  @@id([speakerId, eventroomId])
}

model UserInRoom {
  user   User           @relation(fields: [userId], references: [userId])
  userId String
  room   Room           @relation(fields: [roomId], references: [roomId])
  roomId String
  roles  UserRoleInRoom

  @@id([userId, roomId])
}

model AttendeeInEvent {
  attendeeId String              @id @unique @default(uuid())
  socketId   String
  user       User                @relation(fields: [userId], references: [userId])
  userId     String              @unique()
  isHost     Boolean
  event      Event?              @relation(fields: [eventId], references: [eventId])
  eventId    String?             @unique()
  roles      AttendeeRoleInEvent
  hangout    Hangout?            @relation(fields: [hangoutId], references: [hangoutId])
  hangoutId  String?
}

model Hangout {
  hangoutId       String            @id @unique @default(uuid())
  recordingSchema recordingSchema[]
  AttendeeInEvent AttendeeInEvent[]
}

model Refresh {
  refreshId    String @id @unique @default(uuid())
  user         User   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId       String
  refreshtoken String @unique

  @@index([userId])
}

model recordingSchema {
  name          String
  user          User     @relation(fields: [userId], references: [userId])
  userId        String
  event         Event?   @relation(fields: [eventId], references: [eventId])
  eventId       String?
  hangout       Hangout? @relation(fields: [hangoutId], references: [hangoutId])
  hangoutId     String?
  recordingId   String   @id @unique @default(uuid())
  url           String
  recordingTime DateTime
}

enum RoomType {
  SOCIAL
  PUBLIC
  PRIVATE
}

enum EventType {
  PUBLIC
  PRIVATE
}

enum eventCategory {
  AUDIO
  STREAMING
}

enum Provider {
  LOCAL
  GOOGLE
}

enum UserRoleInRoom {
  ADMIN
  MODERATOR
  MEMBERS
}

enum AttendeeRoleInEvent {
  LISTENER
  SPEAKERANDLISTENER
}
